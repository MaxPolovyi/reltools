#!/usr/bin/env python
import os
import signal
import sys
import time
import daemon 
from optparse import OptionParser

def getDaemonsInfo (baseDir) :

    daemonsToStart = [
                    {'name': 'asicd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'ribd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'arpd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'bgpd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'ospfd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'lacpd',
                    'params': '-params=' + baseDir + '/params'},
                    
                    {'name': 'dhcprelayd',
                    'params': '-params=' + baseDir + '/params'},

                    {'name': 'stpd',
                    'params': '-params=' + baseDir + '/params'},

                    {'name': 'bfdd',
                    'params': '-params=' + baseDir + '/params'},

                    {'name': 'confd',
                     'params': '-params=' + baseDir + '/params'},
                    ]
    return daemonsToStart

class FlexSwitchDaemon (daemon.Daemon):
    def run(self, *args, **kwargs):
        cmd = args[0][0]
        pargs = args[0]
        os.execvp(cmd, pargs)


if __name__=="__main__":
    parser = OptionParser()

    parser.add_option("-d", "--dir", 
                      dest="directory",
                      action='store',
                      help="Directory where the binaries are stored")

    parser.add_option("-o", "--op", 
                      dest="op",
                      default="start",
                      action='store',
                      help="Operation (start/stop) ")

    parser.add_option("-b", "--boot",
                      dest="boot",
                      action='store',
                      help="Type of subsequent boot operation (cold/warm) ")

    (opts, args) = parser.parse_args()
    localBld = False
    if opts.directory != None:
        localBld = True
        baseDir = opts.directory 
    else:
        baseDir = "/opt/flexswitch"

    if opts.op != None and opts.op not in ['start', 'stop']:
        parser.print_usage()
        sys.exit(0)

    if opts.boot != None and opts.boot not in ['cold', 'warm']:
        parser.print_usage()
        sys.exit(0)

    if opts.op != 'stop' and opts.boot != None:
        parser.print_usage()
        sys.exit(0)

    pidFileDir = baseDir+'/bin/pids/'
    asicdBootModeFile = baseDir + '/params/asicdBootMode.conf'
    if opts.boot != None and opts.boot == 'cold':
        asicdBootMode = '0'
    else:
        asicdBootMode = '0' #FIXME:Change this to 1, when we start supporting restart on all apps

    if opts.op == 'start':
        if ((not os.path.exists(pidFileDir))):
            os.makedirs(pidFileDir)
        for dmn in getDaemonsInfo(baseDir):
            print "Starting Daemon %s Params: %s" %( dmn['name'], dmn['params'])
            pidFile = pidFileDir + dmn['name']+'.pid'
            cmd = baseDir +'/bin/'+ dmn['name']
            pargs = (cmd, dmn['params'])
            time.sleep(10)
            pid = os.fork()
            if pid == 0:
                dmn = FlexSwitchDaemon (pidFile,
                                        stdout= baseDir+'/bin/'+'log.txt',
                                        stderr= baseDir+'/bin/'+'log.txt',
                                        verbose=2)
                dmn.start(pargs)
    else:
        for dmn in getDaemonsInfo(baseDir):
            try:
                print "Stopping Daemon %s" %( dmn['name'])
                pidFile = pidFileDir + dmn['name']+'.pid'
                pf = file(pidFile, 'r')
                pid = int(pf.read().strip())
                pf.close()
                try :
                    #Check if process matching pid file is running
                    os.kill(pid, 0)
                except:
                    #Process with pid not running, cleanup pid file
                    os.remove(pidFile)
                    continue
                #Process matching pid exists, perform cleanup
                if dmn['name'] == 'asicd':
                    if os.path.exists(asicdBootModeFile):
                        os.remove(asicdBootModeFile)
                    if opts.boot == 'cold':
                        os.kill(pid, signal.SIGUSR1)
                    else:
                        os.kill(pid, signal.SIGUSR1) #FIXME:Change this to SIGHUP, when we start supporting restart on all apps
                    f = open(asicdBootModeFile, 'w')
                    f.write(asicdBootMode)
                    f.close()
                else:
                    os.kill(pid, signal.SIGHUP)
            except:
                print '*** Failed to stop process [%s]' %(dmn['name'])
        time.sleep(10)
        for dmn in getDaemonsInfo(baseDir if not localBld else baseDir+'/bin'):
            try:
                pidFile = pidFileDir + dmn['name']+'.pid'
                try :
                    #Check if cleanup completed
                    os.kill(pid, 0)
                except:
                    #Process with pid successfully cleaned up
                    os.remove(pidFile)
                    continue
                    #Force kill by sending SIGTERM
                    os.kill(pid, signal.SIGTERM)
                    os.remove(pidFile)
            except:
                print '*** Failed to Kill process [%s]' %(dmn['name'])
