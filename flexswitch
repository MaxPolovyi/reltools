#!/usr/bin/env python
import os
import signal
import sys
import time
import daemon 
from optparse import OptionParser

def getDaemonsInfo (baseDir) :

    daemonsToStart = [
                    {'name': 'asicd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'portd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'ribd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'arpd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'bgpd',
                     'params': '-params=' + baseDir + '/params'},

                    {'name': 'confd',
                     'params': '-params=' + baseDir + '/params'},
                    ]
    return daemonsToStart

class FlexSwitchDaemon (daemon.Daemon):
    def run(self, *args, **kwargs):
        print "Running ConfD"
        cmd = args[0][0]
        pargs = args[0]
        os.execvp(cmd, pargs)


if __name__=="__main__":
    parser = OptionParser()

    parser.add_option("-d", "--dir", 
                      dest="directory",
                      action='store',
                      help="Directory where the binaries are stored")

    parser.add_option("-o", "--op", 
                      dest="op",
                      action='store',
                      help="Operation (start/stop) ")

    (opts, args) = parser.parse_args()
    localBld = False
    if opts.directory != None:
        localBld = True
        baseDir = opts.directory 
    else:
        baseDir = "/opt/flexswitch"

    if opts.op != None and opts.op not in ['start', 'stop']:
        parser.print_usage()


    pidFileDir = baseDir+'/bin/pids/'

    if not os.path.exists(pidFileDir):
        os.makedirs(pidFileDir)

    for dmn in getDaemonsInfo(baseDir if not localBld else baseDir+'/bin'): 
        pidFile = pidFileDir + dmn['name']+'.pid' 
        if opts.op == 'stop':
            print "Stopping Daemon %s" %( dmn['name'])
            try:
                pf = file(pidFile, 'r')
                pid = int(pf.read().strip())
                pf.close()
                print os.kill(pid, signal.SIGTERM)
                os.remove(pidFile)
            except:
                print '*** Failed to Kill process [%s]' %(dmn['name'])

        else:
            print "Starting Daemon %s" %( dmn['name'])
            cmd = baseDir +'/bin/'+ dmn['name'] 
            pargs = (cmd, dmn['params'])
            time.sleep(10)
            pid = os.fork()
            if pid == 0:
                dmn = FlexSwitchDaemon (pidFile, 
                                        #stdout= baseDir+'/bin/'+'log.txt', 
                                        #stderr= baseDir+'/bin/'+'log.txt', 
                                        verbose=2)
                dmn.start(pargs)
